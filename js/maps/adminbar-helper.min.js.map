{"version":3,"sources":["adminbar-helper.js"],"names":["$","Drupal","behaviors","clarin_theme_adminbar_helper","attach","context","settings","timer","prevEffectiveStickyTop","document","toolbar","body","mainToolbar","header","each","index","adminBarElement","ResizeObserver","entries","forEach","entry","toolbarElem","toolbarTotalHeight","clientHeight","id","activeTrays","length","elem","Math","floor","outerHeight","classList","contains","offsetTop","headerHeight","headerFixedStickyTop","headerObservedStickyTop","parseFloat","css","topOffset","abs","window","cancelAnimationFrame","requestAnimationFrame","hasClass","top","repositionContent","target","observe","jQuery"],"mappings":"CAAA,SAAUA,EAAGC,GAGXA,EAAOC,UAAUC,6BAA+B,CAC9CC,OAAQ,SAAgBC,EAASC,GAC/B,IAAIC,EAAQ,KACRC,EAAyB,EAmF7B,GAAIH,IAAYI,UACVH,EAASI,QAAS,CAEpB,MAAMC,EAAOX,EAAE,OAAQK,GACjBO,EAAcZ,EAAE,eAAgBW,GAChCE,EAASb,EAAE,UAAWW,GAI5BX,EAAE,8BAA+BW,GAAMG,KACrC,CAACC,EAAOC,KACqB,IAAIC,eAAeC,IAC5CA,EAAQC,QAAQC,KA7F1B,SAA2BR,EAAaC,EAAQF,EAAMU,GACpD,IAAIC,EAAqBD,EAAYE,aAOrC,GAAuB,gBAAnBF,EAAYG,GAAsB,CACpC,MAAMC,EAAczB,EAAE,wCAAyCW,GAC3Dc,EAAYC,QACdD,EAAYX,KAAK,CAACC,EAAOY,KACvBL,GAAsBK,EAAKJ,oBAG1B,GAAiC,IAA7BF,EAAYE,aAAoB,CAEzC,GAAIvB,EAAE,wCAAyCW,GAAMe,OAGnD,OAGFJ,EAAqBM,KAAKC,MAAMjB,EAAYkB,aAAY,SAGxDR,EAFSD,EAAYU,UAAUC,SAAS,2BAEnBJ,KAAKC,MACxBR,EAAYY,UAAYZ,EAAYE,cAIjBK,KAAKC,MAAMjB,EAAYkB,aAAY,IAS1D,MAAMI,EAAeN,KAAKC,MAAMhB,EAAOiB,aAAY,IAC7CK,EAAuBb,EAAqBY,EAC5CE,EAA0BR,KAAKC,MACnCQ,WAAWxB,EAAOyB,IAAI,SAElBC,EAAYX,KAAKY,IACrBJ,EAA0B5B,GAG5BiC,OAAOC,qBAAqBnC,GAC5BA,EAAQkC,OAAOE,sBAAsB,KAUnC,GAFAhC,EAAK2B,IAAI,cAAkBhB,EAAH,MAEO,WAA3BT,EAAOyB,IAAI,YACb,GAAI3B,EAAKiC,SAAS,iBAAkB,CAGlC,MAAMC,EAAMV,EAAuBI,EACnC1B,EAAOyB,IAAI,MAAUO,EAAH,MAClBrC,EAAyB2B,MACpB,CAEL,MAAMU,EAAMN,EAAYL,EACxBrB,EAAOyB,IAAI,MAAUO,EAAH,MAClBrC,EAAyB,EAAI0B,OAI/BrB,EAAOyB,IAAI,MAAO,IAClB9B,EAAyB,IAkBnBsC,CAAkBlC,EAAaC,EAAQF,EAAMS,EAAM2B,YAGpCC,QAAQhC,QAzGzC,CAgHGiC,OAAQhD","file":"../adminbar-helper.min.js","sourcesContent":["(function($, Drupal) {\n  // Helper methods for the administration toolbar\n  // - Reposition body and floating menu when user has admin toolbar enabled.\n  Drupal.behaviors.clarin_theme_adminbar_helper = {\n    attach: function attach(context, settings) {\n      let timer = null;\n      let prevEffectiveStickyTop = 0;\n\n      function repositionContent(mainToolbar, header, body, toolbarElem) {\n        let toolbarTotalHeight = toolbarElem.clientHeight;\n\n        // We will try to avoid calls to mainToolbar.outerHeight(true) as toolbarElem might already contain\n        //   all the necessary height information to reposition the content\n\n        // - When we receive the main toolbar height -> add the trays height to it\n        // - When we receive a toolbar tray height -> add the main toolbar height to it\n        if (toolbarElem.id === \"toolbar-bar\") {\n          const activeTrays = $(\"div.toolbar-tray-horizontal.is-active\", body);\n          if (activeTrays.length) {\n            activeTrays.each((index, elem) => {\n              toolbarTotalHeight += elem.clientHeight;\n            });\n          }\n        } else if (toolbarElem.clientHeight === 0) {\n          // Tray became invisible:\n          if ($(\"div.toolbar-tray-horizontal.is-active\", body).length) {\n            // Other tray is now visible (tray switch) -> ignore as the other\n            // tray observer will do the repositioning\n            return;\n          }\n          // All toolbar trays are invisible -> [total height] = [main toolbar height]\n          toolbarTotalHeight = Math.floor(mainToolbar.outerHeight(true));\n        } else if (toolbarElem.classList.contains(\"toolbar-tray-horizontal\")) {\n          // Toolbar tray is visible and horizontal -> [total height] = [tray top offset] + [tray height]\n          toolbarTotalHeight = Math.floor(\n            toolbarElem.offsetTop + toolbarElem.clientHeight\n          );\n        } else {\n          // Toolbar tray is visible but vertical -> [total height] = [main toolbar height]\n          toolbarTotalHeight = Math.floor(mainToolbar.outerHeight(true));\n        }\n\n        // When the toolbar position is \"fixed\", the sticky menu \"top\" also needs to be repositioned.\n        //   We do it in the next frame (via requestAnimationFrame()) since when this handler runs, the\n        //   admin toolbar has not yet updated the classes of the body\n\n        // Check difference between default \"top\" in the previous state (prevEffectiveStickyTop) and current observed \"top\"\n        //  - > apply the same offset\n        const headerHeight = Math.floor(header.outerHeight(true));\n        const headerFixedStickyTop = toolbarTotalHeight - headerHeight; // the `top` property of the sticky header when the admin toolbar is fixed\n        const headerObservedStickyTop = Math.floor(\n          parseFloat(header.css(\"top\"))\n        );\n        const topOffset = Math.abs(\n          headerObservedStickyTop - prevEffectiveStickyTop\n        );\n\n        window.cancelAnimationFrame(timer);\n        timer = window.requestAnimationFrame(() => {\n          // The original core/modules/toolbar/js/views/ToolbarVisualView.js tries to position the body\n          //   taking into account the admin toolbar height. This does not work for certain window widths\n          //   when the flex container of the same bar (or tray) expands to two lines.\n          // - > Reset the padding-top set by core/modules/toolbar/js/views/ToolbarVisualView.js and\n          //   reposition content ourselves\n\n          // Reposition body\n          body.css(\"padding-top\", `${toolbarTotalHeight}px`);\n\n          if (header.css(\"position\") === \"sticky\") {\n            if (body.hasClass(\"toolbar-fixed\")) {\n              // Tablet screen widths (480px < width < 1200px) the admin toolbar becomes `position: fixed`\n              // shift our menu header down by the toolbar height\n              const top = headerFixedStickyTop + topOffset;\n              header.css(\"top\", `${top}px`);\n              prevEffectiveStickyTop = headerFixedStickyTop;\n            } else {\n              // Phone screen widths (width < 480px) the admin toolbar becomes `position: absolute`\n              const top = topOffset - headerHeight;\n              header.css(\"top\", `${top}px`);\n              prevEffectiveStickyTop = 0 - headerHeight;\n            }\n          } else {\n            // Reset when menu is not in use anymore\n            header.css(\"top\", \"\");\n            prevEffectiveStickyTop = 0;\n          }\n        });\n      }\n\n      if (context === document) {\n        if (settings.toolbar) {\n          // Admin toolbar is active:\n          const body = $(\"body\", context);\n          const mainToolbar = $(\"#toolbar-bar\", body);\n          const header = $(\"#header\", body);\n\n          // Use a resize observer on the admin toolbar and each of its trays to detect changes in height\n          // Reposition the content when they happen\n          $(\"#toolbar-bar, .toolbar-tray\", body).each(\n            (index, adminBarElement) => {\n              const trayResizeObserver = new ResizeObserver(entries => {\n                entries.forEach(entry => {\n                  repositionContent(mainToolbar, header, body, entry.target);\n                });\n              });\n              trayResizeObserver.observe(adminBarElement);\n            }\n          );\n        }\n      }\n    }\n  };\n})(jQuery, Drupal);\n"]}